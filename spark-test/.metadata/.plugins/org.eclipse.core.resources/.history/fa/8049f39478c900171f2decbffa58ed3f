package hiveTest

import org.apache.spark._
import org.apache.spark.SparkContext._
import org.apache.spark.rdd.RDD
import org.apache.spark.sql.types._
import org.apache.spark.sql._
import org.apache.spark.sql.functions._

object AllConcepts {

  var sc = new SparkContext("local[*]", "AllConcepts")

  var hiveContext = new org.apache.spark.sql.hive.HiveContext(sc)
  var tablonDF = hiveContext.sql("SELECT * FROM LONDON_SMART.TABLON")

  def byClientes1(esta: List[String], inicio: String, fin: String, conceptos: List[String]): DataFrame = {

    val concepto1 = conceptos(0)

    return tablonDF.filter((tablonDF("CODESTABLECIMIENTO") isin (esta: _*)) && (!tablonDF(concepto1).equalTo("null"))
      && (tablonDF("CODMES").between(inicio, fin)))
      .groupBy("CODMES", concepto1)
      .agg(count("CODMES").as("TOTAL"))
      .orderBy("CODMES", concepto1)

  }

  def byClientes2(esta: List[String], inicio: String, fin: String, conceptos: List[String]): DataFrame = {

    val concepto1 = conceptos(0)
    val concepto2 = conceptos(1)

    return tablonDF.filter((tablonDF("CODESTABLECIMIENTO") isin (esta: _*)) && (!tablonDF(concepto1).equalTo("null"))
      && (!tablonDF(concepto2).equalTo("null")) && (tablonDF("CODMES").between(inicio, fin)))
      .groupBy("CODMES", concepto1, concepto2)
      .agg(count("CODMES").as("TOTAL"))
      .orderBy("CODMES", concepto1, concepto2)

  }
  
  def byClientes3(esta: List[String], inicio: String, fin: String, conceptos: List[String]): DataFrame = {

    val concepto1 = conceptos(0)
    val concepto2 = conceptos(1)
    val concepto3 = conceptos(2)

    return tablonDF.filter((tablonDF("CODESTABLECIMIENTO") isin (esta: _*)) && (!tablonDF(concepto1).equalTo("null"))
      && (!tablonDF(concepto2).equalTo("null")) && (!tablonDF(concepto3).equalTo("null"))  && (tablonDF("CODMES").between(inicio, fin)))
      .groupBy("CODMES", concepto1, concepto2, concepto3)
      .agg(count("CODMES").as("total"))
      .orderBy("CODMES", concepto1, concepto2, concepto3)

  }
  
  def byClientes_Total (esta: List[String], inicio: String, fin: String, conceptos: List[String]): DataFrame = {
    
    
    if (conceptos.length()) {
      
    }
    
  }
  

  def main(args: Array[String]) {

  }

}