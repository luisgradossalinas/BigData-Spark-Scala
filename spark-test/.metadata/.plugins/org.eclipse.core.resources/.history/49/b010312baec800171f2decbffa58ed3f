package TestDataFrame

import org.apache.spark._
import org.apache.spark.SparkContext._
import org.apache.log4j._
import org.apache.spark.rdd.RDD
import org.apache.spark.sql.SparkSession
import org.apache.spark.sql.types._
import org.apache.spark.sql._
import org.apache.spark.sql.functions._

object NConceptos {
  
  /*
   * Data del Tablón
   * 17 => RUC
   * 6 => CODESTABLECIMIENTO
   * 12 => MTOTRANSACCION
   * 14 => CODCLAVECIC_CLIENTE
   * 25 => CODMES
   * 43 => SEXO_CLIENTE
   * 46 => RANGO_SUELDO
   * 47 => TIPUSODIGITAL
   * 48 => DESTIPUSODIGITAL
   * 57 => RANGO_EDAD
   */
  
  
   var spark = SparkSession
    .builder
    .appName("PocDF")
    .master("local[*]")
    .getOrCreate()

    //Esta función recibirá 2 conceptos por ejemplo SEXO y NIVEL_INGRESO
    def byClientes(ruta: String, esta: List[String], inicio: String, fin: String): DataFrame = {

    val rddTablon = spark.sparkContext.textFile(ruta).map(r => r.split("\t")).map(r => Row(r(6), r(25), r(43), r(46)))
    val cabeceras = "CODESTABLECIMIENTO CODMES SEXO_CLIENTE RANGO_SUELDO"
    val camposDF = cabeceras.split(" ").map(fieldName => StructField(fieldName, StringType, nullable = true))
    val schema = StructType(camposDF)

    val tablonDF = spark.createDataFrame(rddTablon, schema)
    
    //return tablonDF.filter((tablonDF("CODESTABLECIMIENTO") isin (esta: _*)) && (!tablonDF("SEXO_CLIENTE").equalTo("\\N")) && (!tablonDF("RANGO_SUELDO").equalTo("\\N")) && (tablonDF("CODMES")
    return tablonDF.filter((tablonDF("CODESTABLECIMIENTO") isin (esta: _*))  && (tablonDF("CODMES")
      .between(inicio, fin))).groupBy("CODMES","SEXO_CLIENTE","RANGO_SUELDO")
      .count()
      .orderBy("CODMES","SEXO_CLIENTE","RANGO_SUELDO")
      
  }
  
  
  def main(args: Array[String]) {
    
    val kpiCalculo = byClientes("tablon.tsv", List("100070934", "100070905"), "201501", "201512")
    kpiCalculo.show()
    
  }
  
  
}