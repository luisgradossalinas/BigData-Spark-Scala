package hiveTest

import org.apache.spark._
import org.apache.spark.rdd.RDD
import org.apache.spark.sql.types._
import org.apache.spark.sql._
import org.apache.spark.sql.functions._

object AllConcepts {

  val sc = new SparkContext("local[*]", "AllConcepts")

  val hiveContext = new org.apache.spark.sql.hive.HiveContext(sc)
  val tablonDF = hiveContext.sql("SELECT * FROM LONDON_SMART.TABLON where codmes >= 201501 and codmes <= 201512")

  def byClientes1(esta: List[String], inicio: String, fin: String, conceptos: List[String]): DataFrame = {

    val concepto1 = conceptos(0)

    return tablonDF.filter((tablonDF("CODESTABLECIMIENTO") isin (esta: _*)) && (!tablonDF(concepto1).equalTo("null"))
      && (tablonDF("CODMES").between(inicio, fin)))
      .groupBy("CODMES", concepto1)
      .agg(count("CODMES").as("TOTAL"))
      .orderBy("CODMES", concepto1)

  }
  
  def evolucionCompras1(esta: List[String], inicio: String, fin: String, conceptos: List[String]): DataFrame = {

    val concepto1 = conceptos(0)

    return tablonDF.filter((tablonDF("CODESTABLECIMIENTO") isin (esta: _*)) && (!tablonDF(concepto1).equalTo("null"))
      && (tablonDF("CODMES").between(inicio, fin)))
      .groupBy("CODMES", concepto1)
      .agg(sum("MTOTRANSACCION").as("MONTO_TOTAL"))
      .orderBy("CODMES", concepto1)

  }

  def byClientes2(esta: List[String], inicio: String, fin: String, conceptos: List[String]): DataFrame = {

    val concepto1 = conceptos(0)
    val concepto2 = conceptos(1)

    return tablonDF.filter((tablonDF("CODESTABLECIMIENTO") isin (esta: _*)) && (!tablonDF(concepto1).equalTo("null"))
      && (!tablonDF(concepto2).equalTo("null")) && (tablonDF("CODMES").between(inicio, fin)))
      .groupBy("CODMES", concepto1, concepto2)
      .agg(count("CODMES").as("TOTAL"))
      .orderBy("CODMES", concepto1, concepto2)

  }

  def byClientes3(esta: List[String], inicio: String, fin: String, conceptos: List[String]): DataFrame = {

    val concepto1 = conceptos(0)
    val concepto2 = conceptos(1)
    val concepto3 = conceptos(2)

    return tablonDF.filter((tablonDF("CODESTABLECIMIENTO") isin (esta: _*)) && (!tablonDF(concepto1).equalTo("null"))
      && (!tablonDF(concepto2).equalTo("null")) && (!tablonDF(concepto3).equalTo("null")) && (tablonDF("CODMES").between(inicio, fin)))
      .groupBy("CODMES", concepto1, concepto2, concepto3)
      .agg(count("CODMES").as("total"))
      .orderBy("CODMES", concepto1, concepto2, concepto3)

  }

  def byClientes_Total(esta: List[String], inicio: String, fin: String, conceptos: List[String]): DataFrame = {

    var df = byClientes1(esta, inicio, fin, conceptos)

    if (conceptos.length == 1) {
      df = byClientes1(esta, inicio, fin, conceptos)
    } else if (conceptos.length == 2) {
      df = byClientes2(esta, inicio, fin, conceptos)
    } else if (conceptos.length == 3) {
      df = byClientes3(esta, inicio, fin, conceptos)
    }

    return df

  }

  def evolucionCompras2(esta: List[String], inicio: String, fin: String, conceptos: List[String]): DataFrame = {

    val concepto1 = conceptos(0)
    val concepto2 = conceptos(1)

    return tablonDF.filter((tablonDF("CODESTABLECIMIENTO") isin (esta: _*)) && (!tablonDF(concepto1).equalTo("null"))
      && (!tablonDF(concepto2).equalTo("null")) && (tablonDF("CODMES").between(inicio, fin)))
      .groupBy("CODMES", concepto1, concepto2)
      .agg(sum("MTOTRANSACCION").as("MONTO_TOTAL"))
      .orderBy("CODMES", concepto1, concepto2)

  }

  def evolucionCompras3(esta: List[String], inicio: String, fin: String, conceptos: List[String]): DataFrame = {

    val concepto1 = conceptos(0)
    val concepto2 = conceptos(1)
    val concepto3 = conceptos(2)

    return tablonDF.filter((tablonDF("CODESTABLECIMIENTO") isin (esta: _*)) && (!tablonDF(concepto1).equalTo("null"))
      && (!tablonDF(concepto2).equalTo("null")) && (!tablonDF(concepto3).equalTo("null")) && (tablonDF("CODMES").between(inicio, fin)))
      .groupBy("CODMES", concepto1, concepto2, concepto3)
      .agg(sum("MTOTRANSACCION").as("MONTO_TOTAL"))
      .orderBy("CODMES", concepto1, concepto2, concepto3)

  }

  def evolucionCompras_Total(esta: List[String], inicio: String, fin: String, conceptos: List[String]): DataFrame = {

    var df = evolucionCompras1(esta, inicio, fin, conceptos)

    if (conceptos.length == 1) {
      df = evolucionCompras1(esta, inicio, fin, conceptos)
    } else if (conceptos.length == 2) {
      df = evolucionCompras2(esta, inicio, fin, conceptos)
    } else if (conceptos.length == 3) {
      df = evolucionCompras3(esta, inicio, fin, conceptos)
    }

    return df

  }

  def montoPromedio1(esta: List[String], inicio: String, fin: String, conceptos: List[String]): DataFrame = {

    val concepto1 = conceptos(0)

    return tablonDF.filter((tablonDF("CODESTABLECIMIENTO") isin (esta: _*)) && (!tablonDF(concepto1).equalTo("null"))
      && (tablonDF("CODMES").between(inicio, fin)))
      .groupBy("CODMES", concepto1)
      .agg(avg("MTOTRANSACCION").as("MONTO_PROMEDIO"))
      .orderBy("CODMES", concepto1)

  }

  def montoPromedio2(esta: List[String], inicio: String, fin: String, conceptos: List[String]): DataFrame = {

    val concepto1 = conceptos(0)
    val concepto2 = conceptos(1)

    return tablonDF.filter((tablonDF("CODESTABLECIMIENTO") isin (esta: _*))
      && (!tablonDF(concepto1).equalTo("null"))
      && (!tablonDF(concepto2).equalTo("null")) && (tablonDF("CODMES").between(inicio, fin)))
      .groupBy("CODMES", concepto1, concepto2)
      .agg(avg("MTOTRANSACCION").as("MONTO_PROMEDIO"))
      .orderBy("CODMES", concepto1, concepto2)

  }

  def montoPromedio3(esta: List[String], inicio: String, fin: String, conceptos: List[String]): DataFrame = {

    val concepto1 = conceptos(0)
    val concepto2 = conceptos(1)
    val concepto3 = conceptos(2)

    return tablonDF.filter((tablonDF("CODESTABLECIMIENTO") isin (esta: _*)) && (!tablonDF(concepto1).equalTo("null"))
      && (!tablonDF(concepto2).equalTo("null")) && (!tablonDF(concepto3).equalTo("null"))
      && (tablonDF("CODMES").between(inicio, fin)))
      .groupBy("CODMES", concepto1, concepto2, concepto3)
      .agg(avg("MTOTRANSACCION").as("MONTO_PROMEDIO"))
      .orderBy("CODMES", concepto1, concepto2, concepto3)

  }
  
  def montoPromedio_Total(esta: List[String], inicio: String, fin: String, conceptos: List[String]): DataFrame = {

    var df = montoPromedio1(esta, inicio, fin, conceptos)

    if (conceptos.length == 1) {
      df = montoPromedio1(esta, inicio, fin, conceptos)
    } else if (conceptos.length == 2) {
      df = montoPromedio2(esta, inicio, fin, conceptos)
    } else if (conceptos.length == 3) {
      df = montoPromedio3(esta, inicio, fin, conceptos)
    }

    return df

  }

  def main(args: Array[String]) {

    AllConcepts.byClientes_Total(List("100070934", "100070905"), "201701", "201702", List("SEXO_CLIENTE", "RANGO_SUELDO", "DESTIPUSODIGITAL")).show()
    AllConcepts.evolucionCompras_Total(List("100070934", "100070905"), "201701", "201702", List("SEXO_CLIENTE")).show()
    AllConcepts.montoPromedio_Total(List("100070934", "100070905"), "201701", "201702", List("SEXO_CLIENTE")).show()

  }

}