package TestDataFrame

import org.apache.spark._
import org.apache.spark.SparkContext._
import org.apache.log4j._
import org.apache.spark.rdd.RDD
import org.apache.spark.sql.SparkSession
import org.apache.spark.sql.types._
import org.apache.spark.sql._
import org.apache.spark.sql.functions._

object RangoEdadFrame {

  //Variable necesaria para poder importar el TABLON y crear el DataFrame sobre el cual se realizarán los cálculos.
  var spark = SparkSession
    .builder
    .appName("PocDF")
    .master("local[*]")
    .getOrCreate()

  def byClientes(ruta: String, esta: List[String], inicio: String, fin: String): DataFrame = {

    val rddTablon = spark.sparkContext.textFile(ruta).map(r => r.split("\t")).map(r => Row(r(6), r(25), r(57)))
    val cabeceras = "CODESTABLECIMIENTO CODMES RANGO_EDAD"
    val camposDF = cabeceras.split(" ").map(fieldName => StructField(fieldName, StringType, nullable = true))
    val schema = StructType(camposDF)

    val tablonDF = spark.createDataFrame(rddTablon, schema)
    return tablonDF.filter((tablonDF("CODESTABLECIMIENTO") isin (esta: _*)) && (!tablonDF("RANGO_EDAD").equalTo("\\N")) && (tablonDF("CODMES")
      .between(inicio, fin))).groupBy("RANGO_EDAD").agg(count("RANGO_EDAD").as("TOTAL")).orderBy("RANGO_EDAD")
  }
  
  def evolucionCompras(ruta: String, esta: List[String], inicio: String, fin: String): DataFrame = {

    val rddTablon = spark.sparkContext.textFile(ruta).map(r => r.split("\t")).map(r => Row(r(6), r(25), r(57), r(12).toDouble))    
    val schema = new StructType()
      .add("CODESTABLECIMIENTO", StringType, true)
      .add("CODMES", StringType, true)
      .add("RANGO_EDAD", StringType, true)
      .add("MTOTRANSACCION", DoubleType, true)

    val tablonDF = spark.createDataFrame(rddTablon, schema)
    return tablonDF.filter((tablonDF("CODESTABLECIMIENTO") isin (esta: _*)) && (!tablonDF("RANGO_EDAD").equalTo("\\N")) && tablonDF("CODMES").between(inicio, fin))
      .groupBy("CODMES","RANGO_EDAD").agg(sum("MTOTRANSACCION").as("MONTO_TOTAL")).orderBy("CODMES","RANGO_EDAD")
  }

  def main(args: Array[String]) {

    Logger.getLogger("org").setLevel(Level.INFO)
    val kpiClientesRangoEdad = byClientes("tablon.tsv", List("100070934", "100070905"), "201501", "201512")
    val kpiClientesEvolCompra = evolucionCompras("tablon.tsv", List("100070934", "100070905"), "201501", "201512")
    kpiClientesEvolCompra.show()

  }

}