package TestDataFrame

import org.apache.spark._
import org.apache.spark.SparkContext._
import org.apache.log4j._
import org.apache.spark.rdd.RDD
import org.apache.spark.sql.SparkSession
import org.apache.spark.sql.types._
import org.apache.spark.sql._
import org.apache.spark.sql.functions._

object RangoEdadFrame {

  /*
   * Data del TablÃ³n
   * 17 => RUC
   * 6 => CODESTABLECIMIENTO
   * 12 => MTOTRANSACCION
   * 14 => CODCLAVECIC_CLIENTE
   * 25 => CODMES
   * 43 => SEXO_CLIENTE
   * 46 => RANGO_SUELDO
   * 47 => TIPUSODIGITAL
   * 48 => DESTIPUSODIGITAL
   * 57 => RANGO_EDAD
   */

  /*
  var spark = SparkSession
    .builder
    .appName("PocDF")
    .master("local[*]")
    .getOrCreate()
    * 
    */

  val sc = new SparkContext("local[*]", "RangoEdadFrame")
  val sqlContext = new org.apache.spark.sql.SQLContext(sc)

  def byClientes(ruta: String, esta: List[String], inicio: String, fin: String): DataFrame = {

    val rddTablon = sc.textFile(ruta).map(r => r.split("\t")).map(r => Row(r(6), r(25), r(57)))
    val cabeceras = "CODESTABLECIMIENTO CODMES RANGO_EDAD"
    val camposDF = cabeceras.split(" ").map(fieldName => StructField(fieldName, StringType, nullable = true))
    val schema = StructType(camposDF)

    val tablonDF = sqlContext.createDataFrame(rddTablon, schema)

    return tablonDF.filter((tablonDF("CODESTABLECIMIENTO") isin (esta: _*)) && (!tablonDF("RANGO_EDAD").equalTo("\\N")) && (tablonDF("CODMES")
      .between(inicio, fin))).groupBy("RANGO_EDAD").agg(count("RANGO_EDAD").as("TOTAL")).orderBy("RANGO_EDAD")
  }

  def evolucionCompras(ruta: String, esta: List[String], inicio: String, fin: String): DataFrame = {

    val rddTablon = sc.textFile(ruta).map(r => r.split("\t")).map(r => Row(r(6), r(25), r(57), r(12).toDouble))
    val schema = new StructType()
      .add("CODESTABLECIMIENTO", StringType, true)
      .add("CODMES", StringType, true)
      .add("RANGO_EDAD", StringType, true)
      .add("MTOTRANSACCION", DoubleType, true)

    val tablonDF = sqlContext.createDataFrame(rddTablon, schema)
    return tablonDF.filter((tablonDF("CODESTABLECIMIENTO") isin (esta: _*)) && (!tablonDF("RANGO_EDAD").equalTo("\\N")) && tablonDF("CODMES")
      .between(inicio, fin)).groupBy("CODMES", "RANGO_EDAD").agg(sum("MTOTRANSACCION").as("MONTO_TOTAL")).orderBy("CODMES", "RANGO_EDAD")

  }

  def montoPromedio(ruta: String, esta: List[String], inicio: String, fin: String): DataFrame = {

    val rddTablon = sc.textFile(ruta).map(r => r.split("\t")).map(r => Row(r(6), r(25), r(57), r(12).toDouble))
    val schema = new StructType()
      .add("CODESTABLECIMIENTO", StringType, true)
      .add("CODMES", StringType, true)
      .add("RANGO_EDAD", StringType, true)
      .add("MTOTRANSACCION", DoubleType, true)

    val tablonDF = sqlContext.createDataFrame(rddTablon, schema)
    return tablonDF.filter((tablonDF("CODESTABLECIMIENTO") isin (esta: _*)) && (!tablonDF("RANGO_EDAD").equalTo("\\N")) && (tablonDF("CODMES")
      .between(inicio, fin))).groupBy("CODMES", "RANGO_EDAD").agg(avg("MTOTRANSACCION").as("MONTO_PROMEDIO")).orderBy("CODMES", "RANGO_EDAD")

  }

  def main(args: Array[String]) {

    val kpiClientesRangoEdad = montoPromedio("tablon.tsv", List("100070934", "100070905"), "201501", "201512")

    kpiClientesRangoEdad.show()

  }

}